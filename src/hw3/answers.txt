CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name: Bryan Yue

Problem 6.

(a) Fibonacci failed the testThrowsIllegalArgumentException test since the
if statement tested for n <= 0, which throws an exception if n = 0. To fix
this, I changed n <= 0 to n < 0. 


(b) Fibonacci failed the testBaseCase test since n = 0 was throwing an exception.
to fix this I changed n <= 0 to n < 0, so that n = 0 results in 1. 


(c) Fibonacci failed the testInductiveCase test since getFibTerm(2) was incorrectly
returning 1. To fix this I changed the base case condition from n <= 2 to n < 2.
Also the recursive case in the else statement was incorrectly subtracting the
two recursive calls instead of adding them together. I fixed this by changing
the - to a +. 


Problem 7. 

(a) The Ball.java file had several problems. One problem was that the constructor incorrectly
called the field volume. This needed to be changed to this.volume so reference the field properly,
since the field was assigned to a variable also called volume. Also return 0; in getVolume()
needed to be changed to return this.volume; since we should be returning the volume field instead
of 0 all the time. 

(b) The second approach is better since we do not have to iterate through each item of the set
every time we want to get the total volume. Instead of running O(n), getting the volume is O(1), 
since we just access the total volume. The cost is spread over updating the volume every time
a ball is added or removed. This approach is more efficient.

(c)
1. There are at least 2 ways to implement getBallsFromSmallest(). One way is to create a tree 
set copy of of the balls in getBallsFromSmallest() using a smallest-value-first comparator, 
add all the balls from the original set, then return an iterator on the tree set. I implemented
in this fashion. Another implementation was having a ball tree set copy field and updating 
every time balls were added, removed, or the balls were cleared.When getBallsFromSmallest() is
called, we just need to return the iterator of the copy field.

2. if we assume add() and remove() will be called more often than getBallsFromSmallest, 
I think the first way is better since it optimizes add() and remove() better at the cost of 
a slower getBallsFromSmallest(). getBallFromSmallest() is slower in the first
way since we have to loop through the entire original set to make a copy. Each add is O(log(n))
for a tree set for n balls, so the runtime is O(nlog(n)) for getBallFromSmallest. 
In the second implementation, the copy field is updated every time add() or remove() is
called, so getBallsFromSmallest() is faster since we do not have to add balls in this method
since they were already added in add() function calls. Since the tree set is already ready
we just need to return the iterator which is O(1). However, the second implementation has a 
tradeoff since most of the work made add() and remove() slower. Every time add() or remove() 
is called, we have to do each operation twice for the original and the copy. 
Assuming getBallsFromSmallest() is called less than add() or clear(), the first way is better 
since the work is done in getBallsFromSmallest(). Which way is "better" depends what operations
we want to optimize at the expense of others, since there are tradeoffs involved. 
